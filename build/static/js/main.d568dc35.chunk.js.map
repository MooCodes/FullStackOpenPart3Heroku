{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","class","content","onClick","baseUrl","axios","get","then","res","data","newObject","post","id","put","response","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","important","map","find","n","changedNote","returnedNote","catch","err","alert","toggleImportanceOf","onSubmit","e","preventDefault","noteObejct","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAWeA,EATF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAClB,OACQ,qBAAIC,MAAM,OAAV,UACKF,EAAKG,QACV,wBAAQC,QAASH,EAAjB,mC,gBCLNI,EAAU,wDAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAapB,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAQpB,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAO,GAAQ,OAAIA,EAASL,SCyE9BM,EApFH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAEGpB,MAAK,SAAAqB,GACJT,EAASS,QAEZ,IACHH,QAAQC,IAAI,SAAUR,EAAMW,OAAQ,SAEpC,IAqBMC,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAAhC,GAAI,OAAIA,EAAKiC,aAmB9B,OACE,gCACE,uCACA,8BACE,yBAAQ7B,QAAS,kBAAMoB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGQ,EAAYG,KAAI,SAAAlC,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA9BD,SAACY,GAC1B,IAAMb,EAAOmB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAEvB,KAAOA,KAChCwB,EAAW,2BAAQrC,GAAR,IAAciC,WAAYjC,EAAKiC,YAEhDL,EACUf,EAAIwB,GACX7B,MAAK,SAAA8B,GACJlB,EAASD,EAAMe,KAAI,SAAAlC,GAAI,OAAIA,EAAKa,KAAOA,EAAKyB,EAAetC,SAE5DuC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUzC,EAAKG,QADf,0CAGLiB,EAASD,EAAMa,QAAO,SAAAI,GAAC,OAAIA,EAAEvB,KAAOA,SAiBR6B,CAAmB1C,EAAKa,MAF3Cb,EAAKa,SAMhB,uBAAM8B,SA3DM,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAa,CACjB3C,QAASkB,EACT0B,MAAM,IAAIC,MAAOC,cACjBhB,UAAWiB,KAAKC,SAAW,IAG7BvB,EACUkB,GACPtC,MAAK,SAAA8B,GACJlB,EAASD,EAAMiC,OAAOd,IACtBhB,EAAW,QA+Cb,UACE,uBACE+B,MAAOhC,EACPiC,SA9CiB,SAACV,GACxBlB,QAAQC,IAAIiB,EAAEW,OAAOF,OACrB/B,EAAWsB,EAAEW,OAAOF,UA6ChB,wBAAQG,KAAK,SAAb,yB,MC9ERC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d568dc35.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    return (\r\n            <li class=\"note\">\r\n                {note.content}\r\n            <button onClick={toggleImportance}>toggle importance</button>\r\n            </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = 'https://blooming-depths-32883.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(res => res.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(res => res.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObejct = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService\n      .create(noteObejct)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n    })\n  }\n\n  const handleNoteChange = (e) => {\n    console.log(e.target.value)\n    setNewNote(e.target.value)\n  }\n\n  const notesToShow = showAll \n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id === id ? returnedNote : note))\n      })\n      .catch(err => {\n        alert(\n          `the note '${note.content}' was already deleted from the server`\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n            key={note.id} \n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)} \n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}